#!/bin/bash

# This is an attempt to recode the N(k)it™ framework for OSX for a much cleaner and easier interpretation.

# This version was first published as ver 2.0 of the N(k)it™ framework
scriptVersion=3.1.8

# Let's start with declaring the local variables first.

home=$(echo $HOME) # Fetch the location of the home directory.
desktop=$home/Desktop # Define the location of the desktop. ~/Desktop would have been an easier approach but was not used.
author=black.dragon74 # Don't change it unless you have permission to do so
date=$(date "+%d-%m-%y") # This is the date in the Indian Style as DD-MM-YY for international standard use date=$(date "+%m-%d-%y").
time=$(date "+%T") # Get the time in HH:MM:SS format.
efilocation=/dev/disk0s1 # This is generally the location of EFI. Change it in case.
backupfolder=$desktop/Backup_On_$date/ # The location of the backup folder, date is added for multiple backups.
efifolder=/Volumes/EFI/EFI/ # We will be using the diskutil approach to mount the fs so no more temp dir creation. Do not use /EFI it is more of a dummy folder for UEFI based install. Use that only on Clover Legacy.
clover=$efifolder/CLOVER/ # This is the location where the clover bootloader is generally installed. Change it if necessary.
dsdt=$clover/ACPI/patched/ # The location of all DSDTs and SSDTs.
config=$clover/ # The location of all config files. Some users have some plists backup so we will count them in.
drivers=$clover/drivers64UEFI/ # The location of all clover drivers.
applocation=/Applications/ # The location where the Apps are located. Nah, that's not typo. It is app-location.
injectedkexts=$clover/kexts/ # The location of all (Ke)rnel E(xt)ensions.
slekextlist=~/slekextlist

# Location of folders on the backup directory. These are the folders where the data will be backed up.

dsdtbackup=$backupfolder/DSDT/
configbackup=$backupfolder/Configs/
driversbackup=$backupfolder/Clover_Drivers/
injectedkextsbackup=$backupfolder/Injected_Kexts/
slekextsbackup=$backupfolder/SLE_Kexts/
appsbackup=$backupfolder/Applications/
refs=$backupfolder/default-refs.txt

# We are done with the variables. If some fuction requires some variables they will be declared within the function's scope.

# Now we will declare the functions as i prefer writing a piece of code once instead of writing the same code over and over again.

function mountEFI()
{
	# Check if the volume is aready mounted.
	if [ -e /Volumes/EFI ];
		then 
		# Skip remount
		echo -e "Volume already mounted. Skipping remount."
	else
		# Mount the partition
		echo -e "Mounting EFI Partition."
		diskutil mount $efilocation &>/dev/null
	fi 
}

function unmountEFI()
{
	# Check if the volume is mounted. Then only attemp unmount.
	if [ -e /Volumes/EFI ];
		then
		# Unmount the volume
		diskutil unmount $efilocation &>/dev/null
		echo -e "Unmounted EFI Partition."
	else
		# Skip
		echo -e "Volume already unmounted."
	fi
}

function printHeader()
{
	echo N\(k\)it™ ver $scriptVersion by $author is running on $(sw_vers -productName) $(sw_vers -productVersion)
}

function printHelp()
{
	echo N\(k\)it™ ver $scriptVersion by $author is running on $(sw_vers -productName) $(sw_vers -productVersion)
	echo usage\: nkit [help]\|[-h] Prints help\(this\) information.
	echo \ \ \ \ \ \ \ nkit [backup]\|[-b] Generates a backup of important hackintosh files.
	echo \ \ \ \ \ \ \ nkit [restore]\|[-r] Restores the generated backup.
	echo \ \ \ \ \ \ \ nkit [efim]\|[-em] Mounts the EFI partition.
	echo \ \ \ \ \ \ \ nkit [efiu]\|[-eu] Unmounts the EFI Partition.
	echo \ \ \ \ \ \ \ nkit [prepareaft]\|[-aft] Revives Android File Transfer™ from death\-bed.
	echo \ \ \ \ \ \ \ nkit [unloadaft]\|[-uaft] Puts Android File Transfer™ to death\-bed.
	echo \ \ \ \ \ \ \ nkit [update][force]\|[-up][--force] Check\/Force update of N\(k\)it.
	echo \ \ \ \ \ \ \ nkit [version]\|[-v] Shows the version of the program.
	echo \ \ \ \ \ \ \ nkit [preparemyhack]\|[-pmh] Download and \install base stuffs.
	echo \ \ \ \ \ \ \ nkit [wifix]\|[-wix] Fix Atheros AR956X Wi-Fi.
	echo \ \ \ \ \ \ \ nkit [bkit] Install BKit \(Installer Creator Tool\).
	echo \ \ \ \ \ \ \ nkit [-ethix] Fix RealtekRTL8100 Ethernet.
}

function backupData()
{
	# Tell user about the things that will be backed up.
	printHeader && sleep 0.5 # First things first.
	sudo something &>/dev/null #Get root access once and for all
	echo -e "Starting the backup of your hackintosh." && sleep 0.5
	echo -e "The things that will be backed up include :-" && sleep 0.5
	echo -e "Patched DSDTs if any" && sleep 0.5
	echo -e "All Clover related config files" && sleep 0.5
	echo -e "Drivers required for proper functionality of Clover" && sleep 0.5
	echo -e "Injected Kexts from Clover" && sleep 0.5
	echo -e "Important SLE Kexts" && sleep 0.5
	echo -e "Please wait. Getting list of kexts." && sleep 0.5

	# Prepare a local list of SLE Kexts that are necessary for a hack. Add any kext you wish below.
	if [ -e $slekextlist ];
		then
		rm -f $slekextlist
	fi
	# We will now be getting the list of kexts from the system itself.
	sudo kextcache -i / &>~/s.txt #Kextcache prints list in an STDERR
	sed '$d' ~/s.txt >~/new_s.txt #This is to remove the last line containing STOUT from output.
	rm ~/s.txt # As we no longer need it.
	sed '/AppleMobile/d' ~/new_s.txt >~/new_ss.txt
	while read line;
	do
		echo "$line" | echo $(awk '{print $9}') >>$slekextlist
	done < ~/new_ss.txt
	rm ~/new_ss.txt
	rm ~/new_s.txt

	# Add any other kexts you'ld like to include in backup
	echo -e "AppleHDA"				>>$slekextlist	# As AppleHDAConfigDriver is located inside AppleHDA.kext
	echo -e "corecapture"			>>$slekextlist	# CoreCapture from El-Capitan is required in some cases.
	
	# Tell the user about the kexts that are to be backed up.
	echo -e "The SLE kexts that will be included in the backup are :-" && sleep 0.5
	for f in $(cat $slekextlist); do
		if [ -e /System/Library/Extensions/$f* ]; # To prevent the errors we will check if the file exists.
			then
			echo -e /System/Library/Extensions/$f* && sleep 0.5
		fi
	done

	# Now time to generate the copies of the list of Apps that will be backed up
	# We will create a file named list.txt on user's desktop and fill it with some Important Apps.
	listfile=$desktop/list.txt
	if [ -e $listfile ];
		then
		rm -f $listfile
	fi
	touch $listfile
	echo -e "A file has been created on your desktop as $listfile." && sleep 0.5
	echo -e "It contains the name of some apps that are to be backed up." && sleep 0.5
	echo -e "Add the name of the apps that you want to include in the backup." && sleep 0.5
	echo -e "If the app is in a folder write that first. Ex. Utilities/Terminal" && sleep 0.5
	echo -e "Do not add the .app extension in the list file." && sleep 0.5

	# Populate the listfile with some default values.
	echo -e "Clover"							>>$listfile
	echo -e "IO"								>>$listfile
	echo -e "iExplorer"							>>$listfile
	echo -e "Kext"								>>$listfile
	echo -e "MaciASL"							>>$listfile
	echo -e "DPCI"								>>$listfile
	echo -e "Voodoo"							>>$listfile
	echo -e "AppleHDA"							>>$listfile
	echo -e "WhatsApp"							>>$listfile

	# Open the file now
	echo -e "The file will be opened after 1 second." && sleep 0.5
	sleep 1
	open -e $listfile
	read -p "Press Enter when you're done." kkkk && sleep 0.5

	# Now we continue.
	# We will create a file in which we will prefix /Applications/. Using (S)tream (Ed)itor.
	plistfile=$desktop/plist.txt
	if [ -e $plistfile ];
		then
		rm -f $plistfile
	fi
	touch $plistfile
	sed 's/^/\/Applications\//g' $listfile >> $plistfile

	# Time to tell the user what will be backed up from /Applications folder
	echo -e "The Apps that will be backed up are :-"
	for f in $(cat $plistfile); do
		if [ -e $f* ];
			then
			echo $f* && sleep 0.5
		fi
	done

	# I guess we should create the folders for backup.
	# Remove the folder if it exists.
	if [ -f $backupfolder ];
		then
		rm -rf $backupfolder
	fi

	# Tell and create the folders.
	echo -e "Creating the folders." && sleep 0.5
	mkdir -p $dsdtbackup
	mkdir -p $configbackup
	mkdir -p $driversbackup
	mkdir -p $injectedkextsbackup
	mkdir -p $slekextsbackup
	mkdir -p $appsbackup

	# Time to start creating backup.
	# Need to mount EFI.
	mountEFI

	# We will backup DSDTs first.
	for f in $(ls $dsdt/*.aml); do
		echo Backed Up $f* && sleep 0.5
		cp -rf $f $dsdtbackup
	done

	# Add default refs.txt in-case user has to decompile DSDTs with external refs.
	echo -e "Adding default Refs" && sleep 0.5
	if [ -e $refs ];
		then
		rm -f $refs
	fi
	touch $refs
	echo -e "External (MDBG, MethodObj, 1)"								>>$refs
	echo -e "External (_GPE.MMTB, MethodObj, 0)"						>>$refs
	echo -e "External(_SB.PCI0.XHC.RHUB.TPLD, MethodObj, 2)"			>>$refs
	echo -e "External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj, 2)"			>>$refs
	echo -e "External (_SB_.PCI0.LPCB.H_EC.ECRD, MethodObj, 1)"			>>$refs
	echo -e "External(_SB.PCI0.LPCB.H_EC.ECMD, MethodObj, 1)"			>>$refs
	echo -e "External (_SB_.PCI0.PEG0.PEGP.SGPO, MethodObj, 2)"			>>$refs
	echo -e "External (_SB.PCI0.GFX0.DD02._BCM, MethodObj, 1)"			>>$refs
	echo -e "External (_SB.PCI0.SAT0.SDSM, MethodObj, 4)"				>>$refs
	echo -e "External (_GPE.VHOV, MethodObj, 3)"						>>$refs

	# Configs
	for f in $(ls $config/*.plist); do
		echo Backed Up $f* && sleep 0.5
		cp -rf $f $configbackup
	done

	# Drivers
	for f in $(ls $drivers/*.efi); do
		echo Backed Up $f* && sleep 0.5
		cp -rf $f* $driversbackup
	done

	# Injected Kexts
	cp -rf $injectedkexts $injectedkextsbackup
	echo Backed Up Injected Kexts.

	# SLE Kexts
	for f in $(cat $slekextlist); do
		if [ -e /System/Library/Extensions/$f* ];
			then
			echo Backed Up /System/Library/Extensions/$f* && sleep 0.3
			cp -rf /System/Library/Extensions/$f* $slekextsbackup 2>/dev/null
		fi
	done
	cp -rf /System/Library/Extensions/IO80211Family.kext $slekextsbackup &>/dev/null && echo Backed Up /System/Library/Extensions/IO80211Family.kext && sleep 0.3
	cp -rf /Library/Extensions/AppleBacklightInjector.kext $slekextsbackup &>/dev/null && echo Backed Up /Library/Extensions/AppleBacklightInjector.kext && sleep 0.3

	# Applications
	for f in $(cat $plistfile); do
		if [ -e $f* ];
			then
			cp -rf $f* $appsbackup 2>/dev/null # Some apps throw some unwanted erros do put them to the curb.
			echo Backed Up $f* && sleep 0.5
		fi
	done

	# Good things always have a log of everything.
	log=$backupfolder/log.txt
	if [ -e $log ];
		then
		rm -f $log
	fi
	touch $log
	echo -e "Generating Log.." && sleep 0.8
	echo -e "Backed Up All Data On $date at $time"	>>$log
	echo -e ""										>>$log

	# Remove the crap we created.
	echo -e "Removing redunencies created."
	rm -f $listfile
	rm -f $plistfile
	rm -f $slekextlist

	# Un mount the EFI partition as we are done with it.
	unmountEFI

	# We are done with the backup.
	# Ask user if he wants to open the folder.
	read -p "Open the folder where data was backed up? Y/N: " ans
	case $ans in
		[yY]* )
			echo -e "Opening folder in 1 second."
			sleep 1
			open $backupfolder
			;;
		[nN]* )
			echo -e "Okay! You rule."
			;;
		* )
			echo -e "Reply in Yes Or No (Y/N)"
			;;
	esac

	# Now we exit
	echo -e "Exiting Now."
	exit $1
}

# Starting with the Restore Function.
function restoreData()
{
	printHeader # First things first.
	echo -e "Starting restore of data."
	echo -e "A few things will be verified first."
	echo -e "You are requested to enter the timestamp of the backup folder."
	echo -e "Enter it in dd-mm-yy format and press [ENTER]"
	read timestamp
	restorefolder=$desktop/Backup_On_$timestamp
	# Now we verify if the information provided is correct.
	if [ -e $restorefolder ];
		then
		echo -e "Backup folder exists and is verified."
	else
		echo -e "Backup folder not found. Aborting."
		exit $1
	fi
	# Time to mount EFI as we will be restoring configs and some other EFI related stuffs.
	mountEFI

	# Let's start the restore by first verifying if CLOVER is installed.
	if [ -e $clover ];
		then
		echo -e "Clover is installed. Good to go."
	else
		echo -e "Clover is not installed. Aborting."
		# Unmount EFI too. Silently.
		unmountEFI &>/dev/null
		exit $1
	fi

	# Let's start restoring the stuffs.
	# Configs first
	echo -e "Restoring Configs."
	cp -rf $restorefolder/Configs/* $clover

	# DSDTs and SSDTs follow
	echo -e "Restoring DSDTs/SSDTs"
	cp -rf $restorefolder/DSDT/*.aml $dsdt/

	# Clover's Drivers now
	echo -e "Restoring Drivers."
	cp -rf $restorefolder/Clover_Drivers/* $drivers/

	# Injected Kexts
	echo -e "Restoring Injected kexts."
	cp -rf $restorefolder/Injected_Kexts/* $injectedkexts/

	# Apps at last.
	echo -e "Restoring Applications."
	sudo cp -rf $restorefolder/Applications/* $applocation/

	# Update - Install SLE kexts.
	echo -e "Installing Kexts to System."
	for f in $(ls $restorefolder/SLE_Kexts/); do
		sudo cp -rf $restorefolder/SLE_Kexts/$f /System/Library/Extensions/
		sudo chmod -R 755 /System/Library/Extensions/$f
		sudo chown -R root:wheel /System/Library/Extensions/$f
		echo -e "Installed $f"
	done
	# Rebuild kext cache
	echo -e "Rebuilding Kext cache. This may take a while."
	sudo touch /System/Library/Extensions/ && sudo kextcache -u / &>/dev/null
	# Rebuild system prelinked kernel
	echo -e "Rebuilding System Prelinked Kernel. This might take a moment."
	sudo kextcache -system-prelinked-kernel &>/dev/null
	echo -e "Done Installing Kexts."

	# Add entry to log file
	echo -e "Logging to file.." && sleep 1
	echo -e "Restored this data on $date at $time"			>>$restorefolder/log.txt
	echo -e ""												>>$restorefolder/log.txt

	# And we're done
	echo -e "Restore complete on $date at $time"

	# Sayonara
	unmountEFI
	exit $1
}

# Function to prepare Android File Transfer for use.
# Note: AFT causes serious issues with USB operations on a Hackintosh.
# 		It also causes serious issues in the operation of Brcm Patches kexts.
#		So you are advised to unload it after user.
function prepareAFT()
{
	printHeader
	echo -e "Preparing Android File Transfer™ for use."
	# Check if AFT™ exists. If yes then remove it.
	if [ -e /Applications/Android\ File\ Transfer.app ];
		then
		rm -rf /Applications/Android\ File\ Transfer.app
	fi
	# Copy the aft located in the root of your drive as "aft" in frozen state.
	cp -rf /aft /Applications/Android\ File\ Transfer.app
	echo -e "Done. Open from App-Drawer." && sleep 0.5
	read -p "Press [ENTER] when you are done with it. Press Ctrl+C to terminate." something
	unloadAFT
	exit $1
}

# Function to remove the App from Applications.
function unloadAFT()
{
	printHeader
	# Check if it is installed.
	if [ -e /Applications/Android\ File\ Transfer.app ];
		then
		echo -e "Removing Android File Transfer." && sleep 0.5
		rm -rf /Applications/Android\ File\ Transfer.app
		echo -e "Done."
		exit $1
	else
		echo -e "App not found. Have you loaded it?" && sleep 0.5
		echo -e "You may use nkit -aft or nkit prepareaft to do so." && sleep 0.5
		echo -e "Exiting."
		exit $1
	fi
	# And we're done
}

# An attempt to add the script updater.
function checkUpdate()
{
	# Attempt to add option of force update.
	if [[ $2 == "force"|| $2 == "--force" ]];
		then
		case $2 in
			[fF][oO][rR][cC][eE]|[-][-][fF][oO][rR][cC][eE] )
				printHeader
				sudo rm -rf ~/Library/Caches/com.apple.Terminal* &>/dev/null
				cd $home
				echo -e "Forcing Update."
				echo -e "Downloading latest version."
				curl -o nkit https://raw.githubusercontent.com/Psychic-74/OSX-Nkit/osx/nkit &>/dev/null
				chmod 777 ./nkit
				echo -e "Force Updating..." && sleep 0.5
				sudo rm -f /usr/bin/nkit
				sudo cp -f ./nkit /usr/bin/
				verifyUpdate
				rm -f ./nkit
				exit
				;;
			* )
				echo Invalid option $2. See Help.
				exit
				;;
		esac
	else
		cd $home
		# Clear terminal cache as it might be a problem for curl.
		sudo rm -rf ~/Library/Caches/com.apple.Terminal* &>/dev/null
		echo -e "Checking the script version on the remote."
		curl -o sVers https://raw.githubusercontent.com/Psychic-74/OSX-Nkit/osx/sVers &>/dev/null
		chmod 644 ./sVers
		if [ $(cat ./sVers) == $scriptVersion ];
			then
			echo -e "Congrats. You already have the latest version of N(k)it™ i.e. $scriptVersion"
			rm -f ./sVers
		else
			echo -e "Latest Version is $(cat ./sVers) and you are running $scriptVersion"
			read -p "Update the scipt now? [Y/N] " uans
			case $uans in
				[yY]* )
					echo -e "Initiating Update."
					cd $home
					echo -e "Downloading latest version."
					curl -o nkit https://raw.githubusercontent.com/Psychic-74/OSX-Nkit/osx/nkit &>/dev/null
					chmod 777 ./nkit
					echo -e "Updating..." && sleep 0.5
					sudo rm -f /usr/bin/nkit
					sudo cp -f ./nkit /usr/bin/
					verifyUpdate
					;;
				[nN]* )
					echo -e "Okay. But you should update for new features."
					;;
				* )
					echo -e "Enter Yes/No or Y/N"
					;;
			esac
			rm -f ./sVers
			rm -f ./nkit
		fi
	fi
}

# Try to add the function to verify if the Update was successful else force it.
function verifyUpdate()
{
	echo -e "Verifying Update."
	cd $home
	curl -o sVers https://raw.githubusercontent.com/Psychic-74/OSX-Nkit/osx/sVers &>/dev/null
	chmod 644 ./sVers
	if [ $(cat ./sVers) == $(nkit -v) ];
		then
		echo -e "Update has been verified and is complete."
		rm -f ./sVers
	else
		echo -e "Update failed due to some reason."
		echo -e "Attempting re-update (forced)."
		nkit -up --force
	fi
	rm -f ./sVers
}

# Implement prepare my hack for use (automated).
function prepareMyHack()
{
	printHeader
	echo -e "Preapring you hack for use." && sleep 0.5
	echo -e "This might take a moment or two." && sleep 0.5
	echo -e "Follow on-screen instructions carefully." && sleep 0.5
	echo -e "Downloading required files."
	cd $home
	rm -f ./basefile.zip 2>/dev/null
	curl -o basefile.zip https://raw.githubusercontent.com/Psychic-74/OSX-Nkit/osx/defaultconfig.zip &>/dev/null
	chmod 755 ./basefile.zip
	# Now we unzip the file
	echo -e "Deflating the files."
	unzip -qu ./basefile.zip -d ~/Desktop/
	rm -f ./basefile.zip 2>/dev/null
	# We have placed the file on the desktop.
	# Now we will initiate the restore. But, tell the user first of all.
	echo -e "A folder has been placed on your desktop. Enter the timestamp when asked."
	restoreData

	# Done
}

function wifiFix()
{
	printHeader
	echo -e "Requesting root privileges" && sleep 0.5
	sudo something &>/dev/null
	echo -e "Checking your kexts..." && sleep 1
	if [ -e /System/Library/Extensions/IO80211Family.kext ];
		then
		echo -e "Wifi family kext is found. Good" && sleep 0.5
	else
		echo -e "Wifi Family not found. Bad." && sleep 0.5
	fi

	if [ -e /System/Library/Extensions/IO80211FamilyV2.kext ];
		then
		echo -e "Conflicting FamilyV2 found. Bad." && sleep 0.5
		echo -e "Removing it." && sleep 0.5
		sudo rm -rf /System/Library/Extensions/IO80211FamilyV2.kext
		echo -e "Removed. Proceeding." && sleep 0.5
	else
		echo -e "Conflicts not found. Good." && sleep 0.5
		echo -e "Proceeding." && sleep 0.5
	fi

	if [ -e /System/Library/Extensions/corecapture.kext ];
		then
		echo -e "Incompatible packet capturer found. Bad." && sleep 0.5
		echo -e "It will be replaced. Proceeding." && sleep 0.5
	else
		echo -e "Wifi packet capturer non-existent! Bad." && sleep 0.5
		echo -e "It will be installed. Proceeding." && sleep 0.5
	fi

	if [ -e /System/Library/Extensions/CoreCaptureResponder.kext ];
		then
		echo -e "Incompatible capture responder found. Bad." && sleep 0.5
		echo -e "It will be replaced. Proceeding." && sleep 0.5
	else
		echo -e "Wifi capture responder non-existent! Bad." && sleep 0.5
		echo -e "It will be installed. Proceeding." && sleep 0.5
	fi

	echo -e "Cleaning up for fixes.." && sleep 1
	sudo rm -rf /System/Library/Extensions/corecapture.kext &>/dev/null && sleep 0.5
	sudo rm -rf /System/Library/Extensions/CoreCaptureResponder.kext &>/dev/null && sleep 0.5
	sudo rm -rf /System/Library/Extensions/IO80211Family.kext &>/dev/null && sleep 0.5
	sudo rm -rf /System/Library/Extensions/IO80211FamilyV2.kext &>/dev/null && sleep 0.5
	echo -e "Cleaned up. Proceeding." && sleep 0.5

	echo -e "Fetching resources."
	cd ~/Library
	if [ -e ~/Library/nkit ];
		then
		rm -rf ~/Library/nkit
		mkdir -p ~/Library/nkit
	else
		mkdir -p ~/Library/nkit
	fi
	cd ~/Library/nkit
	curl -o Wifi.zip https://j2java.net/Wifi.zip &>/dev/null
	if [ -e ~/Library/nkit/Wifi.zip ];
		then
		echo -e "Resources fetched. Proceeding." && sleep 0.5
		echo -e "Deflating resources." && sleep 0.5
		unzip -qu ./Wifi.zip -d . &>/dev/null
		echo -e "Fixing Wi-Fi..." && sleep 1
		echo -e "Installing Kexts to System." && sleep 0.5
		for f in $(ls ./ | grep "kext"); do
			sudo cp -rf ./$f /System/Library/Extensions/
			sudo chmod -R 755 /System/Library/Extensions/$f
			sudo chown -R root:wheel /System/Library/Extensions/$f
		done
		echo -e "Wifi Fixed. Restart." && sleep 0.5
		rm -rf ~/Library/nkit &>/dev/null
		exit 1
	else
		echo -e "Fetch failed. Poor network?" && sleep 0.5
		rm -rf ~/Library/nkit &>/dev/null
		echo -e "Try running nkit -wix again. Aborting." && sleep 0.5
		exit 0
	fi
}

function installBkit(){
	printHeader
	echo -e "Installing BKit"
	cd $home
	curl -o bkit https://raw.githubusercontent.com/Psychic-74/Bkit/master/bkit &>/dev/null
	if [ -e ./bkit ];
		then
		echo -e "Almost done."
	else
		echo -e "Download failed. Try again."
		exit 1
	fi
	chmod a+x bkit
	sudo cp -f ./bkit /usr/bin/
	rm -rf ./bkit
	echo -e "Done. Invoke it from terminal."
	exit 0
}

function ethFix()
{
	printHeader
	echo -e "Requesting root privileges" && sleep 0.5
	sudo something &>/dev/null
	echo -e "Checking your kexts..." && sleep 1
	if [ -e /System/Library/Extensions/RealtekRTL8100.kext ];
		then
		echo -e "Realtek kext is found. Good" && sleep 0.5
	else
		echo -e "Realtek not found. Bad." && sleep 0.5
	fi

	if [ -e /System/Library/Extensions/RealtekRTL8111.kext ];
		then
		echo -e "Conflicting 8111 found. Bad." && sleep 0.5
		echo -e "Removing it." && sleep 0.5
		sudo rm -rf /System/Library/Extensions/RealtekRTL8111.kext
		echo -e "Removed. Proceeding." && sleep 0.5
	else
		echo -e "Conflicts not found. Good." && sleep 0.5
		echo -e "Proceeding." && sleep 0.5
	fi

	echo -e "Cleaning up for fixes.."
	sudo rm -rf /System/Library/Extensions/RealtekRTL8100.kext &>/dev/null && sleep 0.5
	echo -e "Cleaned up. Proceeding." && sleep 0.5

	echo -e "Fetching resources."
	cd ~/Library
	if [ -e ~/Library/nkit ];
		then
		rm -rf ~/Library/nkit
		mkdir -p ~/Library/nkit
	else
		mkdir -p ~/Library/nkit
	fi
	cd ~/Library/nkit
	
	curl -o Eth.zip https://j2java.net/Eth.zip &>/dev/null
	
	if [ -e ~/Library/nkit/Eth.zip ];
		then
		echo -e "Resources fetched. Proceeding." && sleep 0.5
		echo -e "Deflating resources." && sleep 0.5
		unzip -qu ./Eth.zip -d . &>/dev/null
		echo -e "Fixing Ethernet..." && sleep 1
		echo -e "Installing Kexts to System." && sleep 0.5
		for f in $(ls ./ | grep "kext"); do
			sudo cp -rf ./$f /System/Library/Extensions/
			sudo chmod -R 755 /System/Library/Extensions/$f
			sudo chown -R root:wheel /System/Library/Extensions/$f
		done
		echo -e "Rebuilding kext cache. This may take a while."
		sudo kextcache -i / &> /dev/null
		echo -e "Ethernet Fixed. Restart." && sleep 0.5
		rm -rf ~/Library/nkit &>/dev/null
		exit 1
	else
		echo -e "Fetch failed. Poor network?" && sleep 0.5
		rm -rf ~/Library/nkit &>/dev/null
		echo -e "Try running nkit -ethix again. Aborting." && sleep 0.5
		exit 0
	fi
}

# Read the arguments passed and do the needful
# Note that commands will be added as and when they are available
# Update - Convert arguments checker into function.
function main()
{
	case $1 in
		[bB][aA][cC][kK][uU][pP]|[-][bB])
			backupData
			;;
		[rR][eE][sS][tT][oO][rR][eE]|[-][rR])
			restoreData
			;;
		[pP][rR][eE][pP][aA][rR][eE][aA][fF][tT]|[-][aA][fF][tT])
			prepareAFT
			;;
		[uU][nN][lL][oO][aA][dD][aA][fF][tT]|[-][uU][aA][fF][tT])
			unloadAFT
			;;
		[eE][fF][iI][mM]|[-][eE][mM])
			mountEFI
			;;
		[eE][fF][iI][uU]|[-][eE][uU])
			unmountEFI
			;;
		[uU][pP][dD][aA][tT][eE]|[-][uU][pP])
			checkUpdate $1 $2 #Check Args in-case it is forced update.
			;;
		[vV][eE][rR][sS]*|[-][vV] )
			echo $scriptVersion
			;;
		[pP][rR][eE][pP][aA][rR][eE][mM][yY][hH][aA][cC][kK]|[-][pP][mM][hH] )
			prepareMyHack
			;;
		[wW][iI][fF][iI][xX]|[-][wW][iI][xX] )
			wifiFix
			;;
		[bB][kK][iI][tT] )
			installBkit
			;;
		[-][eE][tT][hH][iI][xX] )
			ethFix
			;;
		*)
			printHelp
			;;
	esac
}

#============================    READ ARGS AND START PROGRAM      =================================

if [[ $1 == "-v" || $1 == "version" ]];
	then
	main $1 $2
else
	clear
	main $1 $2
fi

#==================================================================================================
